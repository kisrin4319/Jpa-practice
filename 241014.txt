@Entity
* @Entity가 붙은 클래스는 JPA가 관리, 엔티티라 한다.
* JPA를 사용해서 테이블과 매핑할 클래스는 @Entity 필수

* 주의
   기본 생성자 필수 (parameter가 없는 public 또는 protected 생성자)
   final 클래스, enum , interface, inner 클래스 사용x
   저장할 필드에 final 사용 x

 table name을 변경해서 사용하고 싶다면
 @Table(name ="MBR") 로 선언해주면 된다.


 데이터베이스 스키마 자동 생성

* DDL을 애플리케이션 실행 시점에 자동 생성
* 테이블 중심 -> 객체 중심
* 데이터베이스 방언을 활용해서 데이터베이스에 맞는 적절한 DDL 생성
* 이렇게 생성된 DDL은 개발 장비에서만 사용
* 생성된 DDL은 운영서버에서는 사용하지 않거나, 적절히 다듬은 후 사용

데이터베이스 스키마 자동 생성 - 속성
hibernate.hbm2ddl.auto
* create - 기존 테이블 삭제 후 다시 생성 (drop + create)
* create- drop -> create와 같으나 종료시점에 테이블 drop
* update -> 변경분만 반영(운영DB에는 사용하면 안됨)
* validate -> 엔티티와 테이블이 정상 매핑되었는지만 확인
* none -> 사용하지 않음 // 주석처리와 같다.

데이터베이스 스키마 자동 생성 - 실습
* 스키마 자동 생성하기 설정
* 스키마 자동생성하기 실행,옵션별 확인
* 데이터베이스 방언 별로 달라지는 것 확인(varchar)

주의할 점
* 운영 장비에는 절대 create , create-drop, update 사용하면 안된다.
* 개발 초기 단계는 create 또는 update
* 테스트 서버는 update 또는 validate
* 스테이징과 운영 서버는 validate 또는 none

DDL 생성 기능
* 제약조건 추가 : 회원 이름은 필수, 초과 X
@Column(unique = true, length = 10)
* 유니크 제약 조건 추가 가능
* DDL 생성 기능은 DDL을 자동 생성할 때만 사용되고 JPA의 실행 로직에는 영향을 주지 않는다.

필드와 컬럼 매핑

요구사항 추가
1. 회원은 일반 회원과 관리자로 구분해야 한다.
2. 회원 가입일과 수정일이 있어야 한다.
3. 회원을 설명할 수 있는 필드가 있어야 한다. 이 필드는 길이 제한이 없다.


매핑 어노테이션 정리
어노테이션 / 설명
@Column - 컬럼 매핑
@Temporal - 날짜 타입 매핑
@Enumerated - enum 타입 매핑
@Lob - BLOB, CLOB 매핑
@Transient - 특정 필드를 컬럼에 매핑하지 않음

@Column
속성 / 설명 / 기본 값
name - 필드와 매핑할 테이블의 컬럼 이름 - 객체의 필드 이름
insertable,updatable - 등록,변경 가능 여부 - true
nullable(DDL) - null 값의 허용 여부를 설정한다. false로 설정하면 DDL 생성 시에 not null 제약조건이 붙는다.
unique(DDL) - @Table의 uniqueConstraints와 같지만 한 컬럼에 간단히 유니크 제약조건을 걸 때 사용한다.
columnDefinition - 데이터베이스 컬럼 정보를 직접 줄 수 있다. Ex) varchar(100) default 'EMPTY' - 필드의 자바 타입과 방언 정보를 사용
length(DDL) - 문자 길이 제약조건, String 타입에만 사용한다. - 255
precision,scale(DDL) - BigDecimal 타입에서 사용한다(BigInteger도 사용할 수 있다.)
                       Precision은 소수점을 포함한 전체 자릿수 , scale은 소수의 자릿수이다.
                       Double, float 타입에는 적용되지 않는다. 정밀한 소수를 다루어야 할 때만 사용한다. - precision = 19,

@Temporal



@Enumerated
Enum 타입을 매핑할 때 사용
ORDINAL 사용X
value - ORDINAL -> Enum 순서를 데이터베이스에 저장
      - STRING  -> Enum 이름을 데이터베이스에 저장



@Lob
- 지정할 수 있는 속성 없음
- 매핑하는 필드 타입이 문자면 CLOB 매핑 , 나머지는 BLOB 매핑
  * CLOB: String, char[], java.sql.CLOB
  * BLOB: byte[] , java.sql.BLOB

@Transient
- 필드 매핑 x
- 데이터베이스에 저장x, 조회x
- 주로 메모리상에서만 임시로 어떤 값을 보관하고 싶을 때 사용