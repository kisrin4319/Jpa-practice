JPA는 다양한 쿼리 방법을 지원
* JPQL
  * 가장 단순한 조회 방법
    * EntityManager.find()
    * 객체 그래프 탐색(a.getB().getC())
  * 나이가 18살 이상인 유저를 모두 찾고 싶다면?

  *JPA를 사용하면 엔티티 객체를 중심으로 개발

  * 문제는 검색 쿼리

  * 검색을 할 때도 테이블이 아닌 엔티티 객체를 대상으로 검색

  * 모든 DB 데이터를 객체로 변환해서 검색하는 것은 불가능

  * 애플리케이션이 필요한 데이터만 DB에서 불러오려면 결국 검색 조건이 포함된 SQL이 필요

  * JPA는 SQL을 추상화한 JPQL이라는 객체 지향 쿼리 언어 제공

  * SQL과 문법 유사, SELECT, FROM, WHERE, GROUP BY , HAVING, JOIN 지원

  * JPQL은 엔티티 객체를 대상으로 쿼리

  * SQL은 데이터베이스 테이블을 대상으로 쿼리

  * 테이블이 아닌 객체를 대상으로 검색하는 객체 지향 쿼리

  * SQL을 추상화해서 특정 데이터베이스 SQL에 의존X

  * JPQL을 한마디로 정의하면 객체 지향 SQL


* JPA Criteria (실무에서 거의 사용하지 않음 / 이론만 알자)

* QueryDSL
  * 문자가 아닌 자바코드로 JPQL을 작성할 수 있음
  * JPQL 빌더 역할
  * 컴파일 시점에 문법 오류를 찾을 수 있음
  * 동적쿼리 작성 편리함
  * 단순하고 쉬움
  * 실무 사용 권장

* 네이티브 SQL

* JDBC API 직접 사용, MyBatis, SpringJdbcTemplate 함께 사용
  * JPA를 사용하면서 JDBC 커넥션을 직접 사용하거나, 스프링 JdbcTemplate, 마이바티스 등을 함께 사용 가능

  * 단,영속성 컨텍스트를 적절한 시점에 강제로 플러시 필요